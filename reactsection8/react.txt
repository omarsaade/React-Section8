beforee..

import React, { useState, useRef } from 'react';
import Card from '../UI/Card';
import classes from './AddUser.module.css';
import Button from '../UI/Button';
import ErrorModal from '../UI/ErrorModal';
import Wrapper from '../Helpers/Wrapper';

const AddUser = (props) => {
    const nameInputRef = useRef();//its only usable inside of our functional component
    const ageInputRef = useRef();//undefined iza fadye () 

    //it retun an array of object with a "cuurent " property

    const [enteredUsername, setEnteredUsername] = useState("");
    const [enteredAge, setEnteredAge] = useState("");
    const [error, setError] = useState();



    const addUserHandler = (event) => {
        event.preventDefault();
        // console.log(nameInputRef.current.value);

        if (enteredUsername.trim().length === 0 || enteredAge.trim().length === 0) {
            setError({
                title: 'Invalid Input',
                message: 'please enter a valid name and age (non-empty values).'
            });

            return;
        }

        if (+enteredAge < 1) {
            setError({
                title: 'Invalid age',
                message: 'please enter a valid age (>0).'

            });


            return;//return statement finish the function excution,,yaane malah yeshtegel shi men baado
        }

        // console.log(enteredUsername, enteredAge);
        props.onAddUser(enteredUsername, enteredAge);
        setEnteredUsername('');
        setEnteredAge('');
    };




    const usernameChangeHandler = (event) => {
        setEnteredUsername(event.target.value);
    }






    const ageChangeHandler = (event) => {
        setEnteredAge(event.target.value);
    }




    const errorHandler = () => {
        setError(null);// null is treated as a falsy value
    }






    return (
        <Wrapper>
            {error && <ErrorModal title={error.title} message={error.message} onConfirm={errorHandler} />}
            <Card className={classes.input}>
                <form onSubmit={addUserHandler}>
                    <label htmlFor='username'>Username</label>
                    <input ref={nameInputRef} id='username' type="text" onChange={usernameChangeHandler} value={enteredUsername}></input>
                    <label htmlFor='age'>Age (Years)</label>
                    <input ref={ageInputRef} id='age' type="number" onChange={ageChangeHandler} value={enteredAge}></input>
                    <Button type='submit'>Add User</Button>
                </form>
            </Card>
        </Wrapper>
    );
}

export default AddUser; 

========================================

import React, { useState, useRef } from 'react';
import Card from '../UI/Card';
import classes from './AddUser.module.css';
import Button from '../UI/Button';
import ErrorModal from '../UI/ErrorModal';
import Wrapper from '../Helpers/Wrapper';

const AddUser = (props) => {
    const nameInputRef = useRef();//its only usable inside of our functional component
    const ageInputRef = useRef();//undefined iza fadye () 

    //it retun an array of object with a "cuurent " property
    //for reading value , ref is propably better.


    const [error, setError] = useState();



    const addUserHandler = (event) => {
        event.preventDefault();
        const enteredName = nameInputRef.current.value;
        const enteredUserAge = ageInputRef.current.value;
        console.log(enteredName);
        console.log(enteredUserAge);
        if (enteredName.trim().length === 0 || enteredUserAge.trim().length === 0) {
            setError({
                title: 'Invalid Input',
                message: 'please enter a valid name and age (non-empty values).'
            });

            return;
        }

        if (+enteredUserAge < 1) {
            setError({
                title: 'Invalid age',
                message: 'please enter a valid age (>0).'

            });


            return;//return statement finish the function excution,,yaane malah yeshtegel shi men baado
        }

        // console.log(enteredUsername, enteredAge);
        props.onAddUser(enteredName, enteredUserAge);
        nameInputRef.current.value = '';
        ageInputRef.current.value = '';

    };




    const errorHandler = () => {
        setError(null);// null is treated as a falsy value
    }






    return (
        <Wrapper>
            {error && <ErrorModal title={error.title} message={error.message} onConfirm={errorHandler} />}
            <Card className={classes.input}>
                <form onSubmit={addUserHandler}>
                    <label htmlFor='username'>Username</label>
                    <input ref={nameInputRef} id='username' type="text" ></input>
                    <label htmlFor='age'>Age (Years)</label>
                    <input ref={ageInputRef} id='age' type="number" ></input>
                    <Button type='submit'>Add User</Button>
                </form>
            </Card>
        </Wrapper>
    );
}

export default AddUser; 
=================================================

1) useEffect hook without mentioning any dependency array like.. useEffect(someCallbackFuction); 
runs for every render of the functional component in which its included..


2) useEffect hook with an empty dependency array like this..  
useEffect(callbackFunc , [] ) is executed only for the the initial render of the the functional component. 
And then it will not run in the further renders of the same functional Component..

3) useEffect hook with some dependencies inside the dependency array like this.. useEffect(callbackFunc , [dependency] ); 
will run for the initial render as well as when the render happen due to change in dependencies mentioned in the dependency array...

====================================================================================
                                /App/
                                


MainHeader                            Login                      Home 
Text:ATypical page //2               form login //2          <h1>welcome back</h1> //1 true 
navigation:me5fye //1 true

1- Atypical page and login form 
2- bta3mul login - iza kelshi mnih.. 3 true + (enteredPassword and enteredEmail is sent
3an tari2 props.onlogin()

lama tef2os login btenba3at props.disabled // true or false


4-Main header : (isLoggedIn = false) (onlogout = false ) =>  navigation 
Home.js : fadyehhh


=============================
email
true 
password
true
true

disabled : false
==========
btsir setIsLoggedIn : true

=================================================================================================










